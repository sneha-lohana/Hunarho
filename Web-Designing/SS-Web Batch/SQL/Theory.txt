What is Database?

DB is a collection of data. 
Access
Modify
Delete

What is Data?
Information is stored in form of 
1. Text
2. Numbers
3. Images
4. Videos
5. Documents - docx, excel, txt, csv

History of Database
1. Text files - Flat Database
2. Structured Database - Excel
        Data Repeatition - Data Redundancy
3. Relational Database

Relational Database Management System - MySQL

Rules:
Edgar F. Codd
14 EF Codd Rules

1. Relation - Table
2. Attribute - Column Names (Homogeneous - similar data)
3. Tuple - a row in table or record in relation
4. Relationship
    -> One to One - Aadhar Card, PAN Card, Passport
    -> One to Many - Bank Account, Courses, Gmail Account, Degrees
    -> Many to Many - Course to Teacher, Teacher to Student, Teacher to Classes
5. Keys
    -> Simple Key - a single Attribute
    -> Composite Key - when two or more columns are combined to create a key.
    -> Candidate Key - any column that is proposed to be a primary key is called as candidate key.
        => Unique 
        => It can't be null (empty)
    -> Primary Key - is a unique identifier of a tuple.
    -> Unique Key - no value can be repeated but it can have null (empty) value.
    -> Foreign Key - any column that allows me to create a relationship between two tables.
    -> Semantic or Natural Key
        Maharashtra MH
        Gujurat GJ
    -> Technical or Surrogate or Artifical Key - When a table doesn't have any columns that can be identified as primary another unique column is added for the same purpose

Data Normalization
1st NF
2nd NF
3rd NF
BCNF
5th NF
Denormalization

SQL - Structured Query Language
SEQUEL
1. Retrieving Data
2. Insert, Update, Delete Data
3. Create, Modify, Drop and Truncate tables and databases
4. Grant access 

Types of SQL Statements:
1. DDL - Data Definition Language
Create, Modify or Delete the schema of the Database, - Database, Tables, View, Indexes etc

CREATE, ALTER, DROP, TRUNCATE

2. DML - Data Manipulation Language
Allows to modify information or data inside the table
INSERT, UPDATE, DELETE

3. DQL - Data Query Language
SELECT, SHOW

4. DCL / TCL - Data Control Language / Transaction Control Language
GRANT, REVOKE
COMMIT, REVOKE, SAVEPOINT

1. SQL is not case sensitive
2. End every query with a semicolon ;
3. Error reading is difficult

********************** MySQL Command*************************
Installation is done properly

    mysql -version

Starting mysql prompt

    mysql -h localhost -u root -p

mysql - keyword to start mysql
-h host
localhost - hostname
-u user
root - username
-p password

**************** SQL Query to Check Version *******************

SELECT VERSION();

****************DDL - Database Creation and Checking and Selection******************

Creating a database
CREATE DATABASE database_name;
CREATE DATABASE full_stack_demo;

Check the exisiting databases
SHOW DATABASES;

Select a database to work on it
USE database_name;
USE hunarho_db;

Check exisiting tables in the database
SHOW TABLES;

******************** 22-Sep-24 *******************************
Create 2 different databases.
1. test_db
2. full_stack_db

How to delete a database
DROP DATABASE database_name;

******** CREATE A TABLE **************
CREATE TABLE table_name(
    column_name data_types [constraints],
);

What is datatype?
Every values stored is in some form that is datatype

Types of datatypes in SQL
1. Numbers
    INT - 4 bytes - Pincode 
    1 byte = 8 bits
    4210

    TINYINT - 1 byte 

2. String / Character
3. Date

*** Create a student table - StudeID, name *****
CREATE TABLE student(
    studID INT,
    name VARCHAR(50)
);

*** checking existing tables ****

SHOW TABLES;

*** Check the schema of the table ***

DESC table_name;
DESCRIBE table_name;

*** Create a table Employee ***
EmpID - int primary key auto increment
EmpName not null
Email - unique
Mobile - unique
city with defaulf Mumbai
DOB
DOJ
Salary

CREATE TABLE employee_master(
    empId int primary key AUTO_INCREMENT,
    empName varchar(100) NOT NULL,
    email text,
    mobile char(10) UNIQUE,
    city varchar(50) DEFAULT 'Mumbai',
    DOB date,
    DOJ date NOT NULL,
    Salary decimal(10, 2) 
);

Naming Convension Tables:
Master Table - Employee, Student, Course
Transaction Table - Fees_Collection, Attendace, Salary,
Log Tables - Modification , deletion and errors

*** users_master ***
name
gender  enum
Hobbies set
skills set

CREATE TABLE users_master(
    id int primary key AUTO_INCREMENT,
    name varchar(100) not null,
    gender enum("Male", "Female", "Trans"),
    skills SET('Java', 'HTML', 'SQL', 'Python')
);

**** Foreign Key constraint ******
books_master
bookid
bookname
author
price

column_name data_type  Foreign Key REFERENCES table_name(column_name)

CREATE TABLE books_master(
    bookid int primary key AUTO_INCREMENT,
    bookname varchar(100),
    price double(8,2),
    author int Foreign key REFERENCES users_master(id)
);

CREATE TABLE books_master(
    bookid int primary key AUTO_INCREMENT,
    bookname varchar(100),
    price double(8,2),
    author int,
    Foreign key(author) REFERENCES users_master(id)
);

CREATE TABLE Part_Order(
    OrderNo int,
    Item varchar(20),
    qty int,
    Primary Key(OrderNo, Item)
);

******************* Alter Table Command ********************
1. Add a new column
ALTER TABLE table_name ADD Column column_name data_type;

ALTER TABLE student ADD COLUMN mobile varchar(10);

2. Add a constraint
ALTER TABLE table_name ADD constraint constraint_name (Primary Key ,Unique ,Default ,NOT NULL) (column_name);
ALTER TABLE table_name ADD constraint constraint_name Foreign KEY (column_name) REFERENCES table_name(column_name);

ALTER TABLE student ADD CONSTRAINT PRIMARY KEY(studID);

3. Add AUTO_INCREMENT 4. Modify the datatype 5. Modify the column_name
ALTER TABLE table_name CHANGE COLUMN old_column_name new_column_name data_type [constraint] [AUTO_INCREMENT]

ALTER TABLE student CHANGE COLUMN studID studID int AUTO_INCREMENT;

6. Drop a column
ALTER TABLE table_name DROP COLUMN column_name;

ALTER TABLE student ADD COLUMN test int;
ALTER TABLE student DROP COLUMN test;

7. Drop a constraint
ALTER TABLE table_name DROP CONSTRAINT constraint_name;

SHOW CREATE TABLE table_name;

SHOW CREATE TABLE books_master;
ALTER TABLE books_master DROP CONSTRAINT books_master_ibfk_1;

8. Rename a table
ALTER TABLE table_name RENAME TO new_table_name;

ALTER TABLE student RENAME TO student_master;

CHECK TABLE table_name;

CHECK TABLE student;
CHECK TABLE student_master;

********** DROP Statement ***********

DROP TABLE table_name;

************* DQL *************
CREATE DATABASE sample_sales_db;

USE sample_sales_db;
tiny.cc/SampleDB

*********** DML *********************
Data Manipulation Language

1. Insert a single record / tuple in the table
INSERT INTO table_name (column_names) VALUES (value_list);

    INSERT INTO student_master VALUES (1, "DeepRaj", "9810234567");

Check the inserted data
    SELECT * FROM student_master;

2. Insert data into specific columns

    INSERT INTO student_master (name, mobile) VALUES ("Praful",  "5688932423");

3. Insert Multiple Values
INSERT INTO table_name (column_names) VALUES (value_list), (value_list);

    INSERT INTO student_master (name, mobile) VALUES
("Atharva", "9876543210"),
("Harsh", "1234567890"),
("Muskan", "9876542903");

4. Inserting data into enum column
    INSERT INTO users_master (name, gender) VALUES ('Atharva', 'M');

    INSERT INTO users_master (name, gender) VALUES ('Atharva', 'Male');

5. Inserting data into a set

    INSERT INTO users_master (name, skills) VALUES ('DeepRaj', 'HTML', 'SQL');

    INSERT INTO users_master (name, skills) VALUES ('DeepRaj', 'HTML, SQL');

    INSERT INTO users_master (name, skills) VALUES ('DeepRaj', 'HTML,SQL');

    INSERT INTO users_master (name, skills) VALUES ('DeepRaj', 'HTML,SQL,C#'); 

6. Insert into Enum and set
    INSERT INTO users_master (name, gender, skills) VALUES ('Praful', 'Male', 'Python,SQL');

UPDATE Statement

UPDATE table_name SET column_name = value, column_name=value;

    UPDATE users_master SET skills = 'Python,SQL,HTML';

Update specific records
UPDATE table_name SET column_name=value
WHERE condition (column_name comparision_operator value);

    UPDATE users_master SET gender = "Male" WHERE id=3;


DELETE Statement

DELETE FROM table_name WHERE condition;

TRUNCATE

CREATE TABLE users_master_dup1(
    id int primary key AUTO_INCREMENT,
    name varchar(100) not null,
    gender enum("Male", "Female", "Trans"),
    skills SET('Java', 'HTML', 'SQL', 'Python')
);

    INSERT INTO table_name  SELECT * from table_name;

INSERT INTO users_master_dup SELECT * FROM users_master;

    DELETE FROM users_master_dup;
    TRUNCATE users_master_dup1;

** Create table and insert data

CREATE TABLE stud AS SELECT * FROM student_master;

********************* Data Query Language ********************************

Display all rows and columns in the table:
    SELECT * FROM employees;

Display employeeNumber, LastName, FirstName, jobTitle
    SELECT employeeNumber, lastName, firstName, jobTitle FROM employees;

=== Arithmetic Operator and Renaming the column ===
Display employeeNumber, fullname, jobTitle
    SELECT employeeNumber, firstName + " " + lastName AS "Full Name", jobTitle
    FROM employees;

    SELECT employeeNumber, CONCAT(firstName, " ", lastName) Full_Name, jobTitle
    FROM employees;

Display ProductCode, ProductName, BuyPrice and increase the buyPrice by 5%
    SELECT productCode, ProductName, buyPrice, 
    buyPrice + buyPrice * 0.05 "Increased BuyPrice"
    FROM products;

Increase the credit limit of all the customers by 10%.
    SELECT customerNumber, customerName, creditLimit Old_CL, creditLimit + creditLimit * 0.1 New_CL FROM customers;

=== Display Unique Values - DISTINCT

Display all the unique Job Titles in the employees table. 
    SELECT jobTitle from employees;

    SELECT DISTINCT jobTitle from employees;

Relational / comparision_operator WHERE Clause

WHERE condition (column_name Operator value)

Display all the customers whose credit limit is more than 70000. 
    SELECT customerNumber, customerName, creditLimit
    FROM customers
    WHERE creditLimit > 70000;

Display all the customers who are from New York City. 
    SELECT customerNumber, customerName, addressline1, addressline2, city
    FROM customers
    WHERE city = "New York";

    SELECT DISTINCT city from customers;

    SELECT customerNumber, customerName, addressline1, addressline2, city
    FROM customers
    WHERE city = "NYC";

List of Products that have stock more than 6000

    SELECT productCode, ProductName, quantityInStock
    FROm products
    Where quantityInStock>6000;

Display all employees who are sales Representative
    SELECT employeeNumber, CONCAT(firstName, " ", lastName) name, jobTitle
    FROM employees
    WHERE jobTitle = "Sales Rep";

== RANGE Operator (BETWEEN ... AND Operator)
Display all customers who have a credit limit in range of 25000 to 50000. 
    
    SELECT customerNumber, customerName, creditLimit
    FROM customers
    WHERE creditLimit BETWEEN 25000 AND 50000;

== Logical Operators - AND, OR, NOT
Display all the employees who are Sales Representative or work in office number 6.

    SELECT employeeNumber, firstName, jobTitle, officeCode
    FROM employees
    WHERE jobTitle="Sales Rep" OR officeCode=6;

Display all sales rep who work in office 1

    SELECT employeeNumber, firstName, lastName, jobTitle, officeCode
    FROM employees
    WHERE jobTitle="Sales Rep" AND officeCode=1;

Display all the employees who are not Sales Representative.
    SELECT employeeNumber, firstName, lastName, jobTitle
    FROM employees
    WHERE jobTitle != "Sales Rep";

    SELECT employeeNumber, firstName, lastName, jobTitle, officeCode
    FROM employees
    WHERE NOT jobTitle="Sales Rep";

List all the orders placed in month of Feb 2003

    SELECT OrderNumber, orderDate, customerNumber
    FROM orders
    WHERE orderDate BETWEEN '2003-02-01' AND '2003-02-28';

Display all customers who belong to NYC, Las Vegas, Frankfurt

    SELECT customerName, city
    FROM customers
    WHERE city="NYC" or city="Las Vegas" or city="Frankfurt";

=== IN Operator

    SELECT customerName, city
    FROM customers
    WHERE city IN ("NYC", "Las Vegas", "Frankfurt");

Display all the employees who work in office 1, 3, 5

    SELECT firstName, officeCode
    FROm employees
    WHERE officeCode in (1, 3, 5);

=== IS NULL Operator and IS NOT NULL Operator

Display all the customers who don't have a Sales Rep. 

    SELECT customerName, salesRepEmployeeNumber, city
    FROM customers
    WHERE salesRepEmployeeNumber IS NULL;

    SELECT customerName, salesRepEmployeeNumber, city
    FROM customers
    WHERE salesRepEmployeeNumber IS NOT NULL;

Display all the customers who don't have Sales Rep and belong to Singapore or Berlin
    SELECT customerName, salesRepEmployeeNumber, city
    FROM customers
    WHERE salesRepEmployeeNumber IS NULL AND (city ="Singapore" OR city="Berlin");

    SELECT customerName, salesRepEmployeeNumber, city
    FROM customers
    WHERE salesRepEmployeeNumber IS NULL AND city IN ("Singapore", "Berlin");

===== Assignment 1 ======
Display all the offices which have State value as NULL

    SELECT * 
    FROM offices
    WHERE state IS NULL;

Display all the products that have stock greater than 6000 in the product line of planes.

    SELECT productCode, ProductName, quantityInStock, productline
    FROM products
    WHERE quantityInStock > 6000 AND productline = "Planes";

Display all the orders for the titanic and the Queen Mary placed in the year 2003.

    SELECT productCode, ProductName FROM products WHERE ProductName IN ("the titanic", "the Queen Mary");

    SELECT productCode, orderNumber FROM OrderDetails
    WHERE productCode in ("S700_3505", "S700_3962");

    SELECT orderNumber, orderDate FROm orders WHERE orderNumber IN
 (10105  ,
 10118  ,
 10129  ,
 10142  ,
 10153  ,
 10167  ,
 10177  ,
 10185  ,
 10197  ,
 10208  ,
 10222  ,
 10232  ,
 10248  ,
 10261  ,
 10273  ,
 10283  ,
 10295  ,
 10306  ,
 10315  ,
 10327  ,
 10337  ,
 10350  ,
 10360  ,
 10373  ,
 10386  ,
 10397  ,
 10414  ,
 10105  ,
 10117  ,
 10129  ,
 10142  ,
 10153  ,
 10167  ,
 10177  ,
 10185  ,
 10197  ,
 10208  ,
 10222  ,
 10232  ,
 10248  ,
 10261  ,
 10273  ,
 10283  ,
 10294  ,
 10306  ,
 10315  ,
 10327  ,
 10337  ,
 10350  ,
 10360  ,
 10373  ,
 10386  ,
10397  ,
 10414 ) AND orderDate BETWEEN '2003-01-01' AND '2003-12-31';

 ==== Subqueries

    SELECT orderNumber, orderDate FROm orders WHERE orderNumber IN
    (SELECT orderNumber FROm OrderDetails WHERE productCode IN (SELECT productCode FROM products WHERE ProductName IN ("the titanic", "the Queen Mary"))) AND year(orderDate) = 2003;

Display all customers from USA & UK with creditLimit between 50000 and 100000

    SELECT customerName, creditLimit, country
    FROM customers
    WHERE creditLimit BETWEEN 50000 AND 100000 AND country IN ('USA', 'UK');

===== LIKE operator  -- % _
Display all the customers that have Auto in their names.

    SELECT customerName FROM customers WHERE customerName LIKE "%auto%";

Display all the customerName that begin with Auto   
    SELECT customerName FROM customers WHERE customerName LIKE "auto%";

    SELECT customerName FROM customers WHERE customerName LIKE "%auto";

    SELECT customerName FROM customers WHERE customerName LIKE "auto"; 
    This above query is similar to customerName = "auto"

Display customer names which have AUto in between neither at start or at end.
    SELECT customerName FROM customers 
    WHERE customerName LIKE "%auto%" AND customerName NOT LIKE "%auto" AND 
    customerName NOT LIKE "auto%";

Display all the employee name that end with "Y"
    SELECT firstName FROM employees WHERE firstName LIKE "%y";

Display all the employee name that are 6 Character long and start with "L" and end with "E"
    SELECT firstName FROM employees WHERE firstName LIKE "l____e";

Display customer names which have AUto in between neither at start or at end.
    SELECT customerName FROM customers
    WHERE customerName LIKE "%__auto__%";

=== LIMIT
Display the top 10 records of customer table
    SELECT * from customers LIMIT 10;

=== CASE... WHEN... THEN... ELSE ... END Statement
SELECT col1, col2, CASE column_name WHEN experssion (value) THEN task/action
WHEN experssion THEN action
.
.
.
ELSE
action END,  

Increase the cost of the products based on the productline as follows:
    Motorcycle increase cost by $100
    Trucks and Buses increase cost by $50
    Trains increase cost by $20
    and others increase cost bt $10

    SELECT productCode, ProductName, productline, buyPrice, 
    CASE productline 
    WHEN "Motorcycles" THEN "Increase Price by $100"
    WHEN "Trucks and Buses" THEN "Increase Price by $50"
    WHEN "Trains" THEN "Increase Price by $20"
    ELSE "Increase Price by $10" END as "Remarks",
    CASE productline 
    WHEN "Motorcycles" THEN buyPrice+100
    WHEN "Trucks and Buses" THEN buyPrice+50
    WHEN "Trains" THEN buyPrice+20
    ELSE buyPrice+10 END as "new buyPrice"
    FROM products
    LIMIT 30;

=== ORDER BY  column_name ASC | DESC, col2 ASC | DESC

Display all the employees in alphabetic order of their lastName working in the office 1 and 6

    SELECT firstName, lastName, officeCode FROM employees
    WHERE officeCode IN (1, 6)
    ORDER BY lastName;

Display employee names lastName sorted in Ascending order and firstName sorted in descending order
    SELECT firstName, lastName, officeCode FROM employees
    ORDER BY lastName, firstName DESC;

Display orders in descending order with following columns orderNumber, orderlineNumber and subtotal.

    SELECT orderNumber, orderlineNumber, quantityOrdered * priceEach as subtotal
    from OrderDetails
    order by orderNumber desc, orderlineNumber;

====== Assignment 2 =====
Calculate the number of days required in the month of Aug 2004 to ship the products.

    SELECT orderNumber, orderDate, shippedDate, shippedDate - orderDate "No of Shipping Days"
    FROM orders
    WHERE orderDate between '2004-08-01' and '2004-08-31';

    SELECT orderNumber, orderDate, shippedDate, datediff(shippedDate, orderDate) "ShippingDays"
    FROM orders
    WHERE year(orderDate) = 2004 and month(orderDate) = 8;

Display all the product names that don't end with "S"
    select  ProductName from products where ProductName not like "%s";

List all the names of the employees in descending order of their office numbers.
    select firstName, officeCode from employees
    order by officeCode, firstName desc;

List the names, jobTitle and officecode of everyone whose name falls in the alphabetical range of "C" to "L"
    select firstName, jobTitle, officeCode from employees
    where firstName between 'C' and 'L' order by firstName;

    select firstName, jobTitle, officeCode from employees
    where firstName >= "C" and firstName <= "L" order by firstName;

Draw back of the above 2 queries is it will include names C and L names

    select firstName, jobTitle, officeCode from employees where firstName REGEXP '^[C-L].*$';

Display all the employee name who name length is 5 Characters
    select firstName, lastName from employees
    where firstName like "_____" or lastName like "_____";

**************** Assignment ****************
List the names, jobTitle and officecode of everyone whose name falls in the alphabetical range of "C" to "L"
    select firstName, jobTitle, officeCode from employees
    WHere firstName BETWEEN "C" and "L";

    select firstName, jobTitle, officeCode from employees
    WHERE firstName REGEXP '^[C-L].*$';

    select firstName, jobTitle, officeCode from employees
    WHERE firstName RLIKE '^[C-L].*$';

    Starts with - ^
    Ends with - $
    [A-Z].5[0-9].4[A-Z].1
    [0-9].*


Display all the customers who has made payments more than 10000 at a time

    SELECT DISTINCT customerNumber FROM payments
    WHERE amount >= 10000;

*Display all the customers handled by Pamela Castillo and Loui Bondur from France with creditLimit in range of 45000 to 80000

SELECT customerName, country, creditLimit
FROM customers
WHERE creditLimit BETWEEN 45000 and 80000 AND country = "France" and salesRepEmployeeNumber IN (1337, 1401);

Select  employeeNumber from employees where firstName in ('Pamela', 'Loui');

SELECT customerName, country, creditLimit
FROM customers
WHERE creditLimit BETWEEN 45000 and 80000 AND country = "France" and salesRepEmployeeNumber IN (Select  employeeNumber from employees where firstName in ('Pamela', 'Loui'));


Display customers who have ordered Planes.

    SELECT customerNumber, customerName, country
    FROM customers WHERE customerNumber IN (
    Select DISTINCT customerNumber FROM orders WHERE orderNumber IN
    (SELECT  DISTINCT OrderNumber FROM OrderDetails WHERE productCode IN
    (select productCode From Products WHERE productline = "Planes")));


Single row
String Function:

CONCAT - Join 2 or more strings

    SELECT CONCAT(firstName, " ", lastName) as "Full Name" FROM employees;

UPPER(String)

    SELECT UPPER(firstName) FROM employees;
    SELECT UPPER(CONCAT(firstName, " ", lastName)) as "Full Name" FROM employees;

LOWER
    SELECT LOWER(firstName) FROM employees;

REPLACE (exp1, replace content, with exp)
    SELECT REPLACE("Let us Learn", "Learn", "Earn");

    SELECT REPLACE("Let us Learn. Learn, Learn so that you can earn earn", "Learn", "Earn");

SUBSTR (string, from, number of places)
    SELECT SUBSTR("Aggregate Function", 6, 4);
    SELECT SUBSTR("Aggregate Function", -2, 4);
    SELECT SUBSTR("Aggregate Function", -12, 4);
    SELECT SUBSTR("Aggregate Function", -2.5, 4);
    SELECT SUBSTR("Aggregate Function", -2.2, 4);

length() CHAR_LENgth()

    SELECT length('Sneha');
    SELECT char_length('Sneha');

Date Functions:

SELECT CURDATE()

SYSDATE()
NOW()

SELECT LAST_DAY('2024-03-01');
SELECT last_day(now());

date_format(date, format)

%a - Sun - Sat
%b, - Jan - dec
%M - full string month
%d - date
%D - 1st to 31st
%Y - Year
%y - 2 digit year

SELECT date_format(now(), "%a");

06 Oct 2024, Sun

SELECT date_format(now(), "%d %M %Y, %a");
SELECT date_format(now(), "%d %b %Y, %a");
SELECT date_format(now(), "%D %b %Y, %a");

datediff(date1, date2);
SELECT datediff('1990-01-01', Now());
SELECT datediff(now(),'1990-01-01');

select month(now());
select year(now())

Math Functions:
comparision Functions
    COALESCE(n values)
    ISNULL(value)
    greatest
    least
    if(condition, yesvalue, no value)

Aggregate Functions/ Group function:
    min()
    max()
    average() / avg()
    count()
    sum()

    Check max payment received:
    SELECT max(amount) from payments;

    Check min payment received:
    SELECT min(amount) from payments;

    Check total payments received
    SELECT sum(amount) from payments;

    Check total payments received in the year 2003
    SELECT sum(amount) from payments WHERE year(paymentDate) = 2003;

    Check number of customers in USA
    SELECT count(customerNumber) from customers WHERE country = "USA";

    Check the mean of the payment amount
    SELECT avg(amount) from payments;

    GROUP BY clause
    SELECT country, customerName from customers
    order by country;

    select country, count(customerName)
    from customers
    GROUP BY country
    ORDER BY country;

    select country, count(customerName)
    from customers
    GROUP BY country
    ORDER BY count(customerName) desc;

    GROUP BY clause can be applied to those columns which don't have a group/Aggregate function.

************* Assignment **************
* Display employees details as Sneha Lohana works as a trainer
    SELECT CONCAT(firstName, " ", lastName, " works as a ", jobTitle) FROM employees;

* Display annual payments received from customers
    SELECT year(paymentDate), customerNumber, sum(amount)
    FROM payments
    GROUP BY year(paymentDate), customerNumber;

* Display order table data where date should be display as 6th Oct 2024
    SELECT orderNumber, date_format(orderDate, "%D %b %Y") FROm Orders;

* Display city wise customer count
    SELECT city, count(customerNumber) FROM customers
    GROUP BY city;

* Display city that has count more than 3
    SELECT city, count(customerNumber) FROM customers
    WHERE count(customerName) > 3
    GROUP BY city;

    HAVING clause

    SELECT col, Aggregate(col)
    FROm table_name
    WHERE clause
    GROUP BY clause HAVING clause
    ORDER BY

    SELECT city, count(customerNumber) FROM customers
    GROUP BY city HAVING count(customerName)>3;
    
* Display product wise order amount
    SELECT productCode, sum(quantityOrdered), sum(quantityOrdered*priceEach)
    FROm OrderDetails
    GROUP BY productCode;

* Find the customer with highest average orders (Joins)
    SELECT customerNumber, avg(orderNumber)
    FROM orders GROUP BY customerNumber;


*************************** Subqueries ******************************
******** Single Row

Display all the employees who work in the same office like Martin

SELECT firstName, lastName From employees WHERE officeCode = (SELECT officeCode FROM employees where firstName = "Martin");

SELECT officeCode FROM employees where firstName = "Martin";

Display all the customers handled by George

SELECT customerName FROm customers 
WHERE salesRepEmployeeNumber = (SELECT employeeNumber FROM employees WHERE firstName = "George");

*Display all the employees who handle customers from UK

SELECT firstName from employees WHERE employeeNumber = 
(SELECT DISTINCT salesRepEmployeeNumber FROM customers WHERE country = "UK");


SELECT DISTINCT salesRepEmployeeNumber FROM customers WHERE country = "USA";

*********** IN in multiple row subqueries
SELECT firstName from employees WHERE employeeNumber IN 
(SELECT DISTINCT salesRepEmployeeNumber FROM customers WHERE country = "USA");


IN
ANY

*Display all the products ordered by customers whose name begin with Auto

SELECT ProductName, productline FROM products WHERE productCode IN
(SELECT DISTINCT productCode FROM OrderDetails WHERE orderNumber IN 
(SELECT orderNumber FROm orders WHERE customerNumber IN
(SELECT customerNumber FROm customers WHERE customerName Like 'Auto%')));

*Display all the customers from USA who have ordered Motorcycles in the year 2003

SELECT customerName, country FROm customers 
WHERE country ="USA" AND customerNumber IN
(SELECT DISTINCT customerNumber FROM orders 
WHERE year(OrderDate) = 2003 AND orderNumber IN 
(SELECT DISTINCT orderNumber FROM OrderDetails WHERE productCode IN 
(SELECT productCode FROM products where productline = "Motorcycles")));

Display all the products whose price is greater than any motorcycle

Select productCode, ProductName, productline, buyPrice
FROM products WHERE productline="Motorcycles";

> ANY
< ANY

Select productCode, ProductName, productline, buyPrice
FROm products WHERE buyPrice > ANY (select buyPrice FROm products WHERE productline="Motorcycles");

Display all the products greater than all the Motorcycles

Select productCode, ProductName, productline, buyPrice
from products Where buyPrice > ALL (select buyPrice FROm products WHERE productline="Motorcycles" order by buyPrice);

Select productCode, ProductName, productline, buyPrice
from products Where buyPrice < ALL (select buyPrice FROm products WHERE productline="Motorcycles");

*Display all the employees who work on the same profile and office like Pamela
    SELECT firstName, lastName, officeCode FROm employees
    WHERE officeCode = (SELECT officeCode from employees WHERE firstName = "Pamela")
    AND jobTitle = (SELECT jobTitle from employees WHERE firstName = "Pamela");

    SELECT firstName, lastName, officeCode FROm employees
    WHERE (officeCode, jobTitle) IN (SELECT officeCode, jobTitle FROM employees
    WHERE firstName = "Pamela");


    SELECT customerName FROm
    (SELECT * FROM customers WHERE country in ('USA', 'UK') order by customerName) usa_uk;


    Update creditLimit of all the customer who are handled by Larry by 5%

    UPDATE customers SET creditLimit = creditLimit + (creditLimit*0.05)
    WHERE salesRepEmployeeNumber = 
    (SELECT employeeNumber FROM employees WHERE firstName = "Larry");

    Subqueries in DDL 

    CREATE TABLE employee_master AS (SELECT employeeNumber, CONCAT(firstName, " ", lastName) as full_name, email, officeCode FROM employees);

    -> Enclosed in ()
    -> Single row subqueries we can use Relational operator =, >, <, >= , <=, !=, <>
    -> Subqueries are always on the right side
    -> Multiple row then we IN, ANY, ALL
    -> We can write subquery inside another subquery
    -> Don't add Order by clause subquery

INNER JOIN or EQUI JOIN

SELECT column_list
FROM table_list
WHERE equal condition to the columns of the table_list

SELECT * FROM
customers, employees
WHERE customers.salesRepEmployeeNumber = employees.employeeNumber


SELECT c.customerName, e.firstName
FROM employees e, customers c
WHERE e.employeeNumber = c.salesRepEmployeeNumber;

Join using ON clause
SELECT column_list FROM table_name JOIN table_name ON (col = col);

SELECT e.employeeNumber, e.firstName, o.city
FROM employees e JOIN offices o ON (e.officeCode = o.officeCode);

Join using using clause
PK and FK column name is same 

SELECT column_list FROM table_name JOIN table_name USING (column_name);

SELECT e.employeeNumber, e.firstName, o.city
FROM employees e JOIN offices o USING (officeCode);

SELECT c.customerName, sum(p.amount)
FROM customers c JOIN payments p USING (customerNumber)
GROUP BY c.customerName;

SELECT e.firstName, o.city, c.customerName, c.city
FROM employees e, offices o, customers c
WHERE e.officeCode = o.officeCode AND e.employeeNumber = c.salesRepEmployeeNumber;

SELECT e.firstName, o.city, c.customerName, c.city
FROM employees e JOIN offices o ON (o.officeCode = e.officeCode)
JOIN customers c ON (e.employeeNumber = c.salesRepEmployeeNumber);

SELECT e.firstName, o.city, c.customerName, c.city
FROM employees e JOIN offices o USING (officeCode)
JOIN customers c ON (e.employeeNumber = c.salesRepEmployeeNumber);